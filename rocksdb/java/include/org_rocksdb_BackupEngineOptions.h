/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_rocksdb_BackupEngineOptions */

#ifndef _Included_org_rocksdb_BackupEngineOptions
#define _Included_org_rocksdb_BackupEngineOptions
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    newBackupEngineOptions
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_BackupEngineOptions_newBackupEngineOptions
  (JNIEnv *, jclass, jstring);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    backupDir
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_rocksdb_BackupEngineOptions_backupDir
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    setBackupEnv
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_BackupEngineOptions_setBackupEnv
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    setShareTableFiles
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_BackupEngineOptions_setShareTableFiles
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    shareTableFiles
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_BackupEngineOptions_shareTableFiles
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    setInfoLog
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_BackupEngineOptions_setInfoLog
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    setSync
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_BackupEngineOptions_setSync
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    sync
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_BackupEngineOptions_sync
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    setDestroyOldData
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_BackupEngineOptions_setDestroyOldData
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    destroyOldData
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_BackupEngineOptions_destroyOldData
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    setBackupLogFiles
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_BackupEngineOptions_setBackupLogFiles
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    backupLogFiles
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_BackupEngineOptions_backupLogFiles
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    setBackupRateLimit
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_BackupEngineOptions_setBackupRateLimit
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    backupRateLimit
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_BackupEngineOptions_backupRateLimit
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    setBackupRateLimiter
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_BackupEngineOptions_setBackupRateLimiter
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    setRestoreRateLimit
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_BackupEngineOptions_setRestoreRateLimit
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    restoreRateLimit
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_BackupEngineOptions_restoreRateLimit
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    setRestoreRateLimiter
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_BackupEngineOptions_setRestoreRateLimiter
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    setShareFilesWithChecksum
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_BackupEngineOptions_setShareFilesWithChecksum
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    shareFilesWithChecksum
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_BackupEngineOptions_shareFilesWithChecksum
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    setMaxBackgroundOperations
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_BackupEngineOptions_setMaxBackgroundOperations
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    maxBackgroundOperations
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_BackupEngineOptions_maxBackgroundOperations
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    setCallbackTriggerIntervalSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_BackupEngineOptions_setCallbackTriggerIntervalSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    callbackTriggerIntervalSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_BackupEngineOptions_callbackTriggerIntervalSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_BackupEngineOptions
 * Method:    disposeInternal
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_BackupEngineOptions_disposeInternal
  (JNIEnv *, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif
